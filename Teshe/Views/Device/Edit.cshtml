@model Teshe.Models.Device

@{
    ViewBag.Title = "设备信息修改";
}
@Styles.Render("~/Content/uploadify.css")
@Scripts.Render("~/Scripts/uploadify/jquery.uploadify.min.js")
@UIHelper.ShowUploadify("file_upload")
@UIHelper.ShowUploadify("file_report", "/Device/UploadReport", "ReportName", "Report")
<link href="~/Content/tablestyle.css" rel="stylesheet" />
<script>
    window.onload = function () {
        var code = $("#Barcode").val();
        $("#BarcodeImg").attr("src", "/Device/CreateBarcode?code=" + code);
        $("#attributesJson").val(GetAttributeJson());
    }
    function Create() {
        var a = Math.floor(Math.random() * 100000000)
        while (a < 10000000) {
            a = a * 10;
        }
        $("#Barcode").val(a);
        var code = $("#Barcode").val();
        $("#BarcodeImg").attr("src", "/Device/CreateBarcode?code=" + code);
    }
    function getRowObj(obj) {
        var i = 0;
        while (obj.tagName.toLowerCase() != "tr") {
            obj = obj.parentNode;
            if (obj.tagName.toLowerCase() == "table")
                return null;
        }
        return obj;
    }
    function delRow(obj) {
        var rowNo = getRowNo(obj);
        //$("#attributes tr").eq(1).empty();
        $("#attributes tr").eq(rowNo).remove();
        $("#attributesJson").val(GetAttributeJson());
    }
    function getRowNo(obj) {
        var trObj = getRowObj(obj);
        var trArr = trObj.parentNode.children;
        for (var trNo = 0; trNo < trArr.length; trNo++) {
            if (trObj == trObj.parentNode.children[trNo])
            { return trNo; }
        }
    }
    function AddAttribute() {
        var name = $("#attributeName").val();
        var value = $("#attributeValue").val();
        var html = $("#attributes").html();
        $("#attributes").html(html + " <tr> <td>项目名称：</td><td class=\"attr\">" + name + "</td><td>属性值：</td><td class=\"attr\">" + value + "</td><td><a href=\"javascript:void(0)\" onclick=\"delRow(this)\">删除</a></td></tr>");
        $("#attributesJson").val(GetAttributeJson());
    }
    function GetAttr() {
        $("#attributesJson").val(GetAttributeJson());
    }
    function GetAttributeJson() {
        var json = "[";
        var sign = 0;
        var count = $("input[name^='attrValue']").length;
        for (var i = 0; i < count; i++) {
            //alert($("td[class^='attrName']")[i].innerHTML);
            json += "{\"Name\":" + "\"" + $("td[class^='attrName']")[i].innerHTML + "\",";
            json += "\"Content\":" + "\"" + $("input[name^='attr']")[i].value + "\"},";
        }

        $("#attributes tr .attr").each(function () {
            if (sign % 2 == 0) {
                json += "{\"Name\":" + "\"" + $(this).html() + "\",";
            }
            else {
                json += "\"Content\":" + "\"" + $(this).html() + "\"},";
            }
            sign++;
        });
        json = json.substring(0, json.length - 1);
        json += "]";
        //alert(json);
        return json;
    }
</script>
@using (Html.BeginForm("Edit", "Device", FormMethod.Post, new { onsubmit = "GetAttr()" }))
{
    @Html.HiddenFor(model => model.IsVerify)
    <table class="table table-condensed">
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.Name)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Name, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Name, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.Model)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Model, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Model, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.Company)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Company, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Company, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.District)
            </td>
            <td>
                @Html.TextBoxFor(model => model.District, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.District, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.City)
            </td>
            <td>
                @Html.TextBoxFor(model => model.City, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.City, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.Province)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Province, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Province, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.ManufactureDate)
            </td>
            <td>
                @Html.TextBoxFor(model => model.ManufactureDate, new { onfocus = "WdatePicker({'dateFmt':'yyyy-MM'})", @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.ManufactureDate, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.Factory)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Factory, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Factory, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.SetupTime)
            </td>
            <td>
                @Html.TextBoxFor(model => model.SetupTime, new { onfocus = "WdatePicker({'dateFmt':'yyyy-MM'})", @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.SetupTime, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.ExplosionProof)
            </td>
            <td>
                @Html.DropDownListFor(model => model.ExplosionProof, (List<SelectListItem>)ViewBag.ExplosionProofList, new { @class = "easyui-combobox" })
                @Html.ValidationMessageFor(model => model.ExplosionProof, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.SecurityCertificateNo)
            </td>
            <td>
                @Html.TextBoxFor(model => model.SecurityCertificateNo, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.SecurityCertificateNo, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.CheckState)
            </td>
            <td>
                @Html.DropDownListFor(model => model.CheckState, (List<SelectListItem>)ViewBag.CheckStateList, new { @class = "easyui-combobox" })
                @Html.ValidationMessageFor(model => model.CheckState, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.CheckTime)
            </td>
            <td>
                @Html.TextBoxFor(model => model.CheckTime, new { onfocus = "WdatePicker()", @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.CheckTime, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.Validity)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Validity, new { onfocus = "WdatePicker()", @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Validity, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.UseState)
            </td>
            <td>
                @Html.DropDownListFor(model => model.UseState, (List<SelectListItem>)ViewBag.UseStateList, new { @class = "easyui-combobox" })
                @Html.ValidationMessageFor(model => model.UseState, null, new { style = "color:red" })
            </td>
            <td>
                @Html.DisplayNameFor(model => model.MaintenanceRecord)
            </td>
            <td>
                @Html.TextBoxFor(model => model.MaintenanceRecord, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.MaintenanceRecord, null, new { style = "color:red" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.Remarks)
            </td>
            <td colspan="3">
                @Html.TextAreaFor(model => model.Remarks, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Remarks, null, new { style = "color:red" })
            </td>
        </tr>

        @{ int rows = Model.Attributes.Count % 2 == 0 ? Model.Attributes.Count / 2 : Model.Attributes.Count + 1; }
        @{ int count = 0; }
        @for (var i = 0; i < rows; i++)
        {
            <tr>
                @if (count < Model.Attributes.Count)
                {
                    <td class="attrName+@count">@Model.Attributes[count].Name</td>
                    <td>
                        @Html.TextBox("attrValue" + count, @Model.Attributes[count].Content, new { @class = "combo textBoxHeight" })
                    </td>
                    count++;
                }
                @if (count < Model.Attributes.Count)
                {
                    <td class="attrName+@count">@Model.Attributes[count].Name</td>
                    <td>
                        @Html.TextBox("attrValue" + count, @Model.Attributes[count].Content, new { @class = "combo textBoxHeight" })
                    </td>
                    count++;
                }
            </tr>
        }
        <tr>
            <td>
                @*@Html.DisplayNameFor(model => model.Attributes)*@
                项目名称
            </td>
            <td>
                @Html.TextBox("attributeName", "", new { @class = "combo textBoxHeight" })
            </td>

            <td>项目内容
            </td>
            <td>
                @Html.TextBox("attributeValue", "", new { @class = "combo textBoxHeight" })<a href="javascript:void(0)" class="" onclick="AddAttribute()">添加项目</a>
                @Html.Hidden("attributesJson")
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <table class="table table-condensed" id="attributes">
                </table>
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.PhotoUrl)
            </td>
            <td>
                @Html.TextBox("fileName", "", new { @class = "combo textBoxHeight" })
                @Html.HiddenFor(model => model.PhotoUrl)
                @Html.ValidationMessageFor(model => model.PhotoUrl, null, new { style = "color:red" })
                <input type="file" name="file_upload" id="file_upload" />
            </td>
            <td>
                @Html.DisplayNameFor(model => model.Report)
            </td>
            <td>
                @Html.TextBox("ReportName", "", new { @class = "combo textBoxHeight" })
                @Html.HiddenFor(model => model.Report)
                @Html.ValidationMessageFor(model => model.Report, null, new { style = "color:red" })
                <input type="file" name="file_report" id="file_report" />
            </td>
        </tr>
        <tr>
            <td>
                @Html.DisplayNameFor(model => model.Barcode)
            </td>
            <td>
                @Html.TextBoxFor(model => model.Barcode, new { @class = "combo textBoxHeight" })
                @Html.ValidationMessageFor(model => model.Barcode, null, new { style = "color:red" })
            </td>
            <td colspan="2">
                <a style="font-size: 14px;" href="javascript:void(0)" class="" onclick=" Create() ">生成条形码</a>
            </td>
        </tr>
        <tr>
            <td colspan="4">
                @*<a href="javascript:void(0)" class="easyui-linkbutton" onclick="submitForm()">添加设备</a>*@
                @*<a href="javascript:void(0)" class="easyui-linkbutton" onclick="submitForm()" data-options="iconCls:'icon-add'">添加设备</a>*@
                <input type="submit" class="btn btn-default" value="保存修改" />
            </td>
        </tr>
    </table>
}
@* <div class="row">
        <div class="form-group col-sm-4">
           @Html.DisplayNameFor(model => model.Attributes)
            项目名称
            @Html.TextBox("attributeName", "")
        </div>
        <div class="form-group col-sm-4">
            项目内容
            @Html.TextBox("attributeValue", "")
        </div>
        <div style="padding-top: 16px;" class="form-group col-sm-2">
            <a style="height: 33px; font-size: 14px; line-height: 29px" href="javascript:void(0)" class="easyui-linkbutton" onclick="AddAttribute()">添加项目</a>
            @Html.Hidden("attributesJson")
        </div>
    </div>
    <div class="row">
        <div class="form-group col-sm-8">
            <table id="attributes">
                @foreach (var i in Model.Attributes)
                { 
                    @:<tr> <td>项目名称：</td><td class="attr">@i.Name</td><td>项目内容：</td><td class="attr">@i.Content</td><td><a href="javascript:void(0)" onclick="delRow(this)">删除</a></td></tr>
                }
            </table>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-sm-4">
            @Html.DisplayNameFor(model => model.PhotoUrl)
            @Html.TextBox("fileName", "")
            @Html.HiddenFor(model => model.PhotoUrl)
            @Html.ValidationMessageFor(model => model.PhotoUrl)
            <input type="file" name="file_upload" id="file_upload" />
        </div>
        <div class="form-group col-sm-4">
            @Html.DisplayNameFor(model => model.Report)
            @Html.TextBox("ReportName", "")
            @Html.HiddenFor(model => model.Report)
            @Html.ValidationMessageFor(model => model.Report)
            <input type="file" name="file_report" id="file_report" />
        </div>
    </div>
    <div class="row">
        <div class="form-group col-sm-4">
            @Html.DisplayNameFor(model => model.Barcode)
            @Html.TextBoxFor(model => model.Barcode)

            @Html.ValidationMessageFor(model => model.Barcode)
            <img id="BarcodeImg" src="" alt="条形码图片" width="187" height="131" />
        </div>
        <div style="padding-top: 16px;" class="form-group col-sm-4">
            <a style="height: 33px; font-size: 14px; line-height: 29px" href="javascript:void(0)" class="easyui-linkbutton" onclick="Create()">生成条形码</a>
            @*<input id="CreateBarcode" name="Code" type="button " value="生成条形码" class="btn " onclick="Create()" />
        </div>
    </div>
    <input type="submit" value="保存修改" class="btn btn-default" />
}*@

<div>
    @Html.ActionLink("返回", "Index")
</div>
